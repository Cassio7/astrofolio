---
import { capitalizeFirstLetter } from "@/lib/utils";
import Layout from "./layout.astro";
import { ArrowLeft } from "lucide-react";
import Navbar from "@/components/navbar/index.astro";
import Footer from "@/components/footer.astro";
import Toc from "@/components/toc.astro";

import Pattern from "@/components/pattern.astro";

import Box from "@/components/box/index.astro";
import BoxTitle from "@/components/box/title.astro";
import BoxHeader from "@/components/box/header.astro";
import BoxContent from "@/components/box/content.astro";

import type { MarkdownHeading } from "astro";
import LinkBtn from "@/components/link-btn.astro";

interface Props {
  title: string;
  readTime: string;
  date: Date;
  headings: MarkdownHeading[];
}

const { title, readTime, date, headings } = Astro.props;

const formattedDate = new Intl.DateTimeFormat("en-GB", {
  day: "2-digit",
  month: "2-digit",
  year: "numeric",
})
  .format(date)
  .replace(/\//g, ".");
---

<Layout title={`${title} | Louai.b`}>
  <Navbar className="top-1" />

  <main aria-label="Main content" class="min-h-[calc(100vh-120px)]">
    <div class="mx-auto max-w-3xl">
      <Pattern className="h-16">
        <LinkBtn className="absolute bottom-0 left-2 z-1" href="/articles">
          <ArrowLeft />
        </LinkBtn>
      </Pattern>

      <Box>
        <BoxHeader class="text-sm !font-medium text-muted-foreground">
          {formattedDate} â€¢ {readTime}
        </BoxHeader>

        <Pattern className="screen-line-after" />

        <BoxHeader>
          <BoxTitle className="text-3xl !font-black"
            >{capitalizeFirstLetter(title)}</BoxTitle
          >
        </BoxHeader>

        <Pattern />
      </Box>
    </div>

    <div class="relative mx-auto flex max-w-3xl">
      <Box className="min-w-full">
        <BoxContent className="pt-8">
          <article class="prose min-w-full">
            <slot />
          </article>
        </BoxContent>
      </Box>

      <Toc headings={headings} />
    </div>
  </main>

  <Footer />
</Layout>

<script is:inline data-astro-rerun>
  function createProgressBar() {
    const progressContainer = document.createElement("div");
    progressContainer.className =
      "progress-container fixed top-0 z-10 h-1 w-full bg-background";

    const progressBar = document.createElement("div");
    progressBar.className = "progress-bar h-1 w-0 bg-blue-500";
    progressBar.id = "myBar";

    progressContainer.appendChild(progressBar);

    document.body.appendChild(progressContainer);
  }
  createProgressBar();

  /**
   * Update the progress bar when user scrolls
   * */
  function updateScrollProgress() {
    document.addEventListener("scroll", () => {
      const winScroll =
        document.body.scrollTop || document.documentElement.scrollTop;
      const height =
        document.documentElement.scrollHeight -
        document.documentElement.clientHeight;
      const scrolled = Math.ceil((winScroll / height) * 100);

      if (document) {
        const myBar = document.getElementById("myBar");
        if (myBar) {
          myBar.style.width = scrolled + "%";
        }
      }
    });
  }
  updateScrollProgress();

  /**
   * Add copy button to code snippets in markdown
   */
  let copyButtonLabel = "Copy";
  let codeBlocks = Array.from(document.querySelectorAll("pre"));

  for (let codeBlock of codeBlocks) {
    let wrapper = document.createElement("div");
    wrapper.style.position = "relative";

    let copyButton = document.createElement("button");
    copyButton.className = "copy-code";
    copyButton.innerHTML = copyButtonLabel;

    codeBlock.setAttribute("tabindex", "0");
    codeBlock.appendChild(copyButton);
    // wrap codebock with relative parent element
    codeBlock.parentNode.insertBefore(wrapper, codeBlock);
    wrapper.appendChild(codeBlock);

    copyButton.addEventListener("click", async () => {
      await copyCode(codeBlock, copyButton);
    });
  }

  async function copyCode(block, button) {
    let code = block.querySelector("code");
    let text = code.innerText;

    await navigator.clipboard.writeText(text);

    // visual feedback that task is completed
    button.innerText = "Copied!";

    setTimeout(() => {
      button.innerText = copyButtonLabel;
    }, 1000);
  }
</script>
